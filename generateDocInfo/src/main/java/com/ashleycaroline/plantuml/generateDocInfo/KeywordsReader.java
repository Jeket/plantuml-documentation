/********************************************************************************
 *
 *  Class:  KeywordsReader
 *
 *  Responsibility:  Read the keywords from the text file produced by plantuml
 *
 *
 * Expects the file names to exactly these, and in exactly these directories:
 *  resources/com/ashleycaroline/plantuml/help.txt
 *  resources/com/ashleycaroline/plantuml/language.txt
 *  resources/com/ashleycaroline/plantuml/pattern.txt
 *
 *
 * Language file format (language.txt  generated by running java -jar plantuml -language :
 * -authors
 * -pattern
 * -help
 * -version
 *
 * --------------------
 *
 *   [semi-colon][keyword for section]
 *   [semi-colon][count of entries for this section]
 *   [blank-line]
 *   [entries]
 *
 *   [semi-colon][EOF]  == marks end of the file
 *
 *
 *  @file KeywordsReader
 *  @project documentation  (local project name)
 *
 *  @author Ashley Engelund   ashley@ashleycaroline.com | weedySeaDragon@github
 *  @since 30 Sep 2018
 *
 ********************************************************************************/


package com.ashleycaroline.plantuml.generateDocInfo;

import com.google.common.io.Resources;

import java.net.URISyntaxException;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;


import static com.ashleycaroline.plantuml.generateDocInfo.GeneratorConsts.PLANTUML_GENERATED;
import static com.ashleycaroline.plantuml.generateDocInfo.GeneratorConsts.TEXT_EXT;

public class KeywordsReader {


    public static final String LANGUAGE_FN = "language";



    // ------------------------------------------------


    public static Map<String, String> organizeLanguageFileInfo() {

        Map<String, String> languageInfo = new HashMap<>();

        List<String> fileEntries = readLanguageFile();

        return languageInfo;
    }


    public static List<String> readLanguageFile() {

        List<String> result = new ArrayList<>();

        try {
            result = readTextFile(LANGUAGE_FN);

        } catch (IOException e) {
            // TODO LOG and show error
            System.out.println("\n >> ERROR: Could not read the file.\n");
            e.printStackTrace();

        } catch (URISyntaxException e) {
            // TODO LOG and show error
            System.out.println("\n >> ERROR: Could not access the file.\n");
            e.printStackTrace();
        }

        return result;
    }


    // ------------------------------------------------


    private static List<String> readTextFile(String textFileName) throws IOException, URISyntaxException {

        List<String> textLines = new ArrayList<>();

        textLines = readFileIntoList(textFileName + TEXT_EXT);

        return textLines;
    }


    private static List<String> readFileIntoList(String fileName) throws IOException, URISyntaxException {

        List<String> lines = Collections.emptyList();

        //Get file from resources folder

        String dirString = Resources.getResource(PLANTUML_GENERATED).getPath();

        lines = Files.readAllLines(Paths.get(dirString, fileName), StandardCharsets.UTF_8);

        return lines;
    }

}  // end class KeywordsReader
